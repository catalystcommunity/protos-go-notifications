// api.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: notifications/v1alpha1/api.proto

package notificationsv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificationsService_UpsertUsers_FullMethodName                  = "/notifications.v1alpha1.NotificationsService/UpsertUsers"
	NotificationsService_GetUsers_FullMethodName                     = "/notifications.v1alpha1.NotificationsService/GetUsers"
	NotificationsService_ListUsers_FullMethodName                    = "/notifications.v1alpha1.NotificationsService/ListUsers"
	NotificationsService_DeleteUsers_FullMethodName                  = "/notifications.v1alpha1.NotificationsService/DeleteUsers"
	NotificationsService_GetNotifications_FullMethodName             = "/notifications.v1alpha1.NotificationsService/GetNotifications"
	NotificationsService_SendNotifications_FullMethodName            = "/notifications.v1alpha1.NotificationsService/SendNotifications"
	NotificationsService_UpdateSubscriptions_FullMethodName          = "/notifications.v1alpha1.NotificationsService/UpdateSubscriptions"
	NotificationsService_UpsertScheduledNotifications_FullMethodName = "/notifications.v1alpha1.NotificationsService/UpsertScheduledNotifications"
	NotificationsService_GetScheduledNotifications_FullMethodName    = "/notifications.v1alpha1.NotificationsService/GetScheduledNotifications"
	NotificationsService_DeleteScheduledNotifications_FullMethodName = "/notifications.v1alpha1.NotificationsService/DeleteScheduledNotifications"
)

// NotificationsServiceClient is the client API for NotificationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsServiceClient interface {
	UpsertUsers(ctx context.Context, in *NotificationsServiceUpsertUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceUpsertUsersResponse, error)
	GetUsers(ctx context.Context, in *NotificationsServiceGetUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceGetUsersResponse, error)
	ListUsers(ctx context.Context, in *NotificationsServiceListUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceListUsersResponse, error)
	DeleteUsers(ctx context.Context, in *NotificationsServiceDeleteUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceDeleteUsersResponse, error)
	GetNotifications(ctx context.Context, in *NotificationsServiceGetNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceGetNotificationsResponse, error)
	SendNotifications(ctx context.Context, in *NotificationsServiceSendNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceSendNotificationsResponse, error)
	UpdateSubscriptions(ctx context.Context, in *NotificationsServiceUpdateSubscriptionsRequest, opts ...grpc.CallOption) (*NotificationsServiceUpdateSubscriptionsResponse, error)
	UpsertScheduledNotifications(ctx context.Context, in *NotificationsServiceUpsertScheduledNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceUpsertScheduledNotificationsResponse, error)
	GetScheduledNotifications(ctx context.Context, in *NotificationsServiceGetScheduledNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceGetScheduledNotificationsResponse, error)
	DeleteScheduledNotifications(ctx context.Context, in *NotificationsServiceDeleteScheduledNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceDeleteScheduledNotificationsResponse, error)
}

type notificationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsServiceClient(cc grpc.ClientConnInterface) NotificationsServiceClient {
	return &notificationsServiceClient{cc}
}

func (c *notificationsServiceClient) UpsertUsers(ctx context.Context, in *NotificationsServiceUpsertUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceUpsertUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceUpsertUsersResponse)
	err := c.cc.Invoke(ctx, NotificationsService_UpsertUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetUsers(ctx context.Context, in *NotificationsServiceGetUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceGetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceGetUsersResponse)
	err := c.cc.Invoke(ctx, NotificationsService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) ListUsers(ctx context.Context, in *NotificationsServiceListUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceListUsersResponse)
	err := c.cc.Invoke(ctx, NotificationsService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) DeleteUsers(ctx context.Context, in *NotificationsServiceDeleteUsersRequest, opts ...grpc.CallOption) (*NotificationsServiceDeleteUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceDeleteUsersResponse)
	err := c.cc.Invoke(ctx, NotificationsService_DeleteUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetNotifications(ctx context.Context, in *NotificationsServiceGetNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceGetNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceGetNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_GetNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) SendNotifications(ctx context.Context, in *NotificationsServiceSendNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceSendNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceSendNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_SendNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) UpdateSubscriptions(ctx context.Context, in *NotificationsServiceUpdateSubscriptionsRequest, opts ...grpc.CallOption) (*NotificationsServiceUpdateSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceUpdateSubscriptionsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_UpdateSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) UpsertScheduledNotifications(ctx context.Context, in *NotificationsServiceUpsertScheduledNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceUpsertScheduledNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceUpsertScheduledNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_UpsertScheduledNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) GetScheduledNotifications(ctx context.Context, in *NotificationsServiceGetScheduledNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceGetScheduledNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceGetScheduledNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_GetScheduledNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsServiceClient) DeleteScheduledNotifications(ctx context.Context, in *NotificationsServiceDeleteScheduledNotificationsRequest, opts ...grpc.CallOption) (*NotificationsServiceDeleteScheduledNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsServiceDeleteScheduledNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificationsService_DeleteScheduledNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServiceServer is the server API for NotificationsService service.
// All implementations should embed UnimplementedNotificationsServiceServer
// for forward compatibility.
type NotificationsServiceServer interface {
	UpsertUsers(context.Context, *NotificationsServiceUpsertUsersRequest) (*NotificationsServiceUpsertUsersResponse, error)
	GetUsers(context.Context, *NotificationsServiceGetUsersRequest) (*NotificationsServiceGetUsersResponse, error)
	ListUsers(context.Context, *NotificationsServiceListUsersRequest) (*NotificationsServiceListUsersResponse, error)
	DeleteUsers(context.Context, *NotificationsServiceDeleteUsersRequest) (*NotificationsServiceDeleteUsersResponse, error)
	GetNotifications(context.Context, *NotificationsServiceGetNotificationsRequest) (*NotificationsServiceGetNotificationsResponse, error)
	SendNotifications(context.Context, *NotificationsServiceSendNotificationsRequest) (*NotificationsServiceSendNotificationsResponse, error)
	UpdateSubscriptions(context.Context, *NotificationsServiceUpdateSubscriptionsRequest) (*NotificationsServiceUpdateSubscriptionsResponse, error)
	UpsertScheduledNotifications(context.Context, *NotificationsServiceUpsertScheduledNotificationsRequest) (*NotificationsServiceUpsertScheduledNotificationsResponse, error)
	GetScheduledNotifications(context.Context, *NotificationsServiceGetScheduledNotificationsRequest) (*NotificationsServiceGetScheduledNotificationsResponse, error)
	DeleteScheduledNotifications(context.Context, *NotificationsServiceDeleteScheduledNotificationsRequest) (*NotificationsServiceDeleteScheduledNotificationsResponse, error)
}

// UnimplementedNotificationsServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificationsServiceServer struct{}

func (UnimplementedNotificationsServiceServer) UpsertUsers(context.Context, *NotificationsServiceUpsertUsersRequest) (*NotificationsServiceUpsertUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertUsers not implemented")
}
func (UnimplementedNotificationsServiceServer) GetUsers(context.Context, *NotificationsServiceGetUsersRequest) (*NotificationsServiceGetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedNotificationsServiceServer) ListUsers(context.Context, *NotificationsServiceListUsersRequest) (*NotificationsServiceListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedNotificationsServiceServer) DeleteUsers(context.Context, *NotificationsServiceDeleteUsersRequest) (*NotificationsServiceDeleteUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsers not implemented")
}
func (UnimplementedNotificationsServiceServer) GetNotifications(context.Context, *NotificationsServiceGetNotificationsRequest) (*NotificationsServiceGetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) SendNotifications(context.Context, *NotificationsServiceSendNotificationsRequest) (*NotificationsServiceSendNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) UpdateSubscriptions(context.Context, *NotificationsServiceUpdateSubscriptionsRequest) (*NotificationsServiceUpdateSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptions not implemented")
}
func (UnimplementedNotificationsServiceServer) UpsertScheduledNotifications(context.Context, *NotificationsServiceUpsertScheduledNotificationsRequest) (*NotificationsServiceUpsertScheduledNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertScheduledNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) GetScheduledNotifications(context.Context, *NotificationsServiceGetScheduledNotificationsRequest) (*NotificationsServiceGetScheduledNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduledNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) DeleteScheduledNotifications(context.Context, *NotificationsServiceDeleteScheduledNotificationsRequest) (*NotificationsServiceDeleteScheduledNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduledNotifications not implemented")
}
func (UnimplementedNotificationsServiceServer) testEmbeddedByValue() {}

// UnsafeNotificationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServiceServer will
// result in compilation errors.
type UnsafeNotificationsServiceServer interface {
	mustEmbedUnimplementedNotificationsServiceServer()
}

func RegisterNotificationsServiceServer(s grpc.ServiceRegistrar, srv NotificationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificationsService_ServiceDesc, srv)
}

func _NotificationsService_UpsertUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceUpsertUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpsertUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_UpsertUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpsertUsers(ctx, req.(*NotificationsServiceUpsertUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceGetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetUsers(ctx, req.(*NotificationsServiceGetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).ListUsers(ctx, req.(*NotificationsServiceListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_DeleteUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceDeleteUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).DeleteUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_DeleteUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).DeleteUsers(ctx, req.(*NotificationsServiceDeleteUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceGetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetNotifications(ctx, req.(*NotificationsServiceGetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_SendNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceSendNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).SendNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_SendNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).SendNotifications(ctx, req.(*NotificationsServiceSendNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_UpdateSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceUpdateSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpdateSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_UpdateSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpdateSubscriptions(ctx, req.(*NotificationsServiceUpdateSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_UpsertScheduledNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceUpsertScheduledNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).UpsertScheduledNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_UpsertScheduledNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).UpsertScheduledNotifications(ctx, req.(*NotificationsServiceUpsertScheduledNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_GetScheduledNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceGetScheduledNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).GetScheduledNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_GetScheduledNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).GetScheduledNotifications(ctx, req.(*NotificationsServiceGetScheduledNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationsService_DeleteScheduledNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationsServiceDeleteScheduledNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServiceServer).DeleteScheduledNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationsService_DeleteScheduledNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServiceServer).DeleteScheduledNotifications(ctx, req.(*NotificationsServiceDeleteScheduledNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationsService_ServiceDesc is the grpc.ServiceDesc for NotificationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.v1alpha1.NotificationsService",
	HandlerType: (*NotificationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertUsers",
			Handler:    _NotificationsService_UpsertUsers_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _NotificationsService_GetUsers_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _NotificationsService_ListUsers_Handler,
		},
		{
			MethodName: "DeleteUsers",
			Handler:    _NotificationsService_DeleteUsers_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _NotificationsService_GetNotifications_Handler,
		},
		{
			MethodName: "SendNotifications",
			Handler:    _NotificationsService_SendNotifications_Handler,
		},
		{
			MethodName: "UpdateSubscriptions",
			Handler:    _NotificationsService_UpdateSubscriptions_Handler,
		},
		{
			MethodName: "UpsertScheduledNotifications",
			Handler:    _NotificationsService_UpsertScheduledNotifications_Handler,
		},
		{
			MethodName: "GetScheduledNotifications",
			Handler:    _NotificationsService_GetScheduledNotifications_Handler,
		},
		{
			MethodName: "DeleteScheduledNotifications",
			Handler:    _NotificationsService_DeleteScheduledNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications/v1alpha1/api.proto",
}
